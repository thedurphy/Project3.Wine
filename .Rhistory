library(Rgraphviz) ## Correlation plots.
set.seed(47)
bigram <- function(x) NGramTokenizer(x, Weka_control(min = 2, max = 2))
trigram <- function(x) NGramTokenizer(x, Weka_control(min = 3, max = 3))
quadgram <- function(x) NGramTokenizer(x, Weka_control(min = 4, max = 4))
toSpace <- content_transformer(function(x, pattern) gsub(pattern, " ", x)) ## function for tm_map to turn desired string into a space
## the following function was necessary after creating the occurence percentages of the ngrams
## any zero occurence percentage resulted in an element of length zero which resulted in the the object being coerced into class list
# returns string w/o leading whitespace  http://stackoverflow.com/questions/2261079/how-to-trim-leading-and-trailing-whitespace-in-r
trim.leading <- function (x)  sub("^\\s+", "", x)
# returns string w/o trailing whitespace
trim.trailing <- function (x) sub("\\s+$", "", x)
# returns string w/o leading or trailing whitespace
trim <- function (x) gsub("^ *|(?<= ) | *$", "", x, perl = T)
install.packages('snow')
install.packages('Rmpi')
library('Rmpi'); library('snow')
library(Rmpi)
install.packages('Rmpi')
library(Rmpi)
vignette(package="parallel", topic = "parallel")
install.packages('paralles')
install.packages('parallel')
install.packages("parallel")
install.packages("parallel")
install.packages("parallel")
install.packages("parallel")
if (require(devtools)) install.packages("devtools")#if not alrady installed
devtools::install_github("AnalytixWare/ShinySky")
install.packages("devtools")
if (require(devtools)) install.packages("devtools")#if not alrady installed
devtools::install_github("AnalytixWare/ShinySky")
library(shinysky)
shinysky::run.shinysky.example()
if (require(devtools)) install.packages("devtools")#if not alrady installed
devtools::install_github("AnalytixWare/ShinySky")
library(shinysky)
shinysky::run.shinysky.example()
sq.foot <- c(450, 300, 350)
rooms <- c(3, 2, 2)
age <- c(15, 10, 12)
levels <- c(2, 1, 2)
X <- cbind(sq.foot, rooms, age, levels)
View(X)
Y <- c(150, 100, 150)
(tansverse(X)*X)^-1
(rtansverse(X)*X)^-1
(transverse(X)*X)^-1
(t(X)*X)^-1
(t(X)*X.)^-1
(t(.X)*X)^-1
(t(X) %%*%% X)^-1
(t(X) %*% X)^-1
((t(X) %*% X)^-1) %*% (t(X) %*% Y)
b <- ((t(X) %*% X)^-1) %*% (t(X) %*% Y)
D <- c(250, 2, 9, 1)
b * D
((t(X) %*% X)) %*% (t(X) %*% Y)
b %*% D
fit <- lm(Y~., data = cbind(X, Y))
fit <- lm(Y~., data = data.frame(cbind(X, Y)))
fit$coefficients
fit
beta = solve(t(X) %*% X) %*% (t(X) %*% Y) ; beta
t(X) %*% X
(t(X) %*% X)^-1
(t(X) %*% X)^-1 * X
(t(X) %*% X)^-1 %*% X
(t(X) %*% X)^-1 %*% t(X)
(t(X) %*% X)^-1 %*% t(X) %*% Y
b / (t(X) %*% X)^-1 %*% t(X)
b %/% (t(X) %*% X)^-1 %*% t(X)
b %*% ((t(X) %*% X)^-1 %*% t(X))^1
b
t(x) %*% Y
t(X) %*% Y
(t(X) %*% Y) / (t(X) %*% X)
(t(X) %*% Y) %*% (t(X) %*% X)^1
b <- solve(t(X) %*% X) %*% t(X) %*% Y
X$sq.foot
X[,1]
X[,1] <- c(4, 5, 6)
View(X)
b <- solve(t(X) %*% X) %*% t(X) %*% Y
X[,3] <- c(7, 8, 9)
b <- solve(t(X) %*% X) %*% t(X) %*% Y
corr(X)
cor(X)
View(X)
X[,1] <- c(4.5, 3, 3.5)
View(X)
X[,3] <- c(1.5, 1, 1.2)
b <- solve(t(X) %*% X) %*% t(X) %*% Y
Y <- c(1.5, 1, 1.5)
b <- solve(t(X) %*% X) %*% t(X) %*% Y
cor(cbind(X, Y))
X[,4] <- c(5, 3, 2)
cor(cbind(X, Y))
b <- solve(t(X) %*% X) %*% t(X) %*% Y
mtcars
mtcars[1:4, 1:4]
set <- mtcars[1:4, 1:4]
set$mpg
Y <- set$mpg
set[,2:4]
X <- set[,2:4]
b <- solve(t(X) %*% X) %*% t(X) %*% Y
as.matrix(X)
X <- as.matrix(X)
Y <- as.matrix(Y)
b <- solve(t(X) %*% X) %*% t(X) %*% Y
View(b)
b * mtcars[5,2:4]
sum(b * mtcars[5,2:4])
mtcars[5,2:4]
b
sum(b %*% mtcars[5,2:4])
sum(b * mtcars[4,2:4])
sum(b * mtcars[3,2:4])
View(mtcars)
sum(b * mtcars[2,2:4])
sum(b * mtcars[1,2:4])
sum(b * mtcars[5,2:4])
sum(b * mtcars[6,2:4])
sum(b * mtcars[7,2:4])
sum(b * mtcars[6,2:4])
pred <- sapply(1:32, function(x){
sum(b * mtcars[x,2:4])
})
comp <- cbind(mtcars$mpg, pred)
View(comp)
mtcars[6,2:4]
X
Y
b
sum(mtcars[6,2:4] * b)
b * mtcars[6, 2:4]
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
install.packages("ggplot2", dependencies = T)
install.packages("knitr", dependencies = T)
install.packages("dplyr", dependencies = T)
library(devtools)
data(diamonds)
data(diamond)
library(ggplot)
library(ggplot2)
data(diamonds)
View(diamonds)
library(energy)
with(diamonds, dcor.ttest(depth, price))
with(diamonds, cor.test(depth, price))
mean(diamonds$depth)
plot = ggplot(aes(x = depth, y = price), data = diamonds)
plot + geom_point(alpha = 1/100) +
scale_x_continuous(breaks = seq(0, max(diamonds$depth), 2)) +
geom_line(h = mean(diamonds$depth))
plot + geom_point(alpha = 1/100) +
scale_x_continuous(breaks = seq(0, max(diamonds$depth), 2)) +
geom_line(v = mean(diamonds$depth))
plot + geom_point(alpha = 1/100) +
scale_x_continuous(breaks = seq(0, max(diamonds$depth), 2))
plot = ggplot(aes(x = carat, y = price), data = diamonds)
plot + geom_point() +
coord_cartesian(xlim = c(0, quantile(diamonds$carat, 0.99)),
ylim = c(0, quantile(diamonds$price, 0.99)))
quantile(diamonds$carat, 0.99)
quantile(diamonds$price, 0.99)
diamonds$volume <- diamonds$x * diamonds$y * diamonds$z
plot <- ggplot(aes(x = volume, y = price), data = diamonds)
plot + geom_point()
View(diamonds)
View(arrange(diamonds, volume))
library(dplyr)
View(arrange(diamonds, volume))
View(arrange(diamonds, -volume))
8.09 * 58.9 * 8.06
diamonds[diamonds$volume == 0 | diamonds$volume >= 800,]
diamonds[!(diamonds$volume == 0 | diamonds$volume >= 800),]
with(diamonds[!(diamonds$volume == 0 | diamonds$volume >= 800),],
cor.test(price, volume)
with(diamonds[!(diamonds$volume == 0 | diamonds$volume >= 800),],
cor.test(price, volume))
adjusted_diamonds <- diamonds[!(diamonds$volume == 0 | diamonds$volume >= 800),]
plot = ggplot(aes(x = volume, y = price), data = adjusted_diamonds)
plot + geom_point(alpha = 1/100)
plot + geom_point(alpha = 1/50)
plot + geom_point(alpha = 1/50) + geom_smooth(method = 'lm')
plot + geom_point(alpha = 1/50) + stat_smooth(method = 'lm',
formula = y ~ x)
plot + geom_point(alpha = 1/50) + stat_smooth(method = 'lm',
formula = y ~ x+I(x^2))
plot + geom_point(alpha = 1/50) + stat_smooth(method = 'lm',
formula = y ~ x+I(x^3))
plot + geom_point(alpha = 1/50) + stat_smooth(method = 'lm',
formula = y ~ x+I(x^2))
diamondsByClarity <- arrange(summarise(group_by(diamonds, clarity),
mean_price = mean(price),
median_price = median(price),
min_price = min(price),
max_price = max(price),
n = n()), clarity)
diamondsByClarity <- arrange(summarise(group_by(adjusted_diamonds, clarity),
mean_price = mean(price),
median_price = median(price),
min_price = min(price),
max_price = max(price),
n = n()), clarity)
View(diamondsByClarity)
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity, mean_price = mean(price))
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color, mean_price = mean(price))
View(diamonds_mp_by_color)
View(diamonds_mp_by_clarity)
library(gridExtra)
pcl <- ggplot(aes(x = clarity, y = mean_price), data = diamonds_mp_by_clarity)
pcl + geom_bar()
pcl + geom_bar(stat = 'identity')
pcl <- pcl + geom_bar(stat = 'identity')
View(diamonds_mp_by_color)
pco <- ggplot(aes(x = color, y = mean_price), data = diamonds_mp_by_color)
pco + geom_bar(stat = 'identity')
pco <- pco + geom_bar(stat = 'identity')
grid.arrange(pcl, pco, ncol = 1)
eg <- read.csv('Electricity Generation.xls - Data.csv')
setwd("D:/Documents/GitHub/Udacity-DataAnalyst Nanodegree/Datasets")
eg <- read.csv('Electricity Generation.xls - Data.csv')
View(eg)
class(eg)
qplot(x = X1990, y = X1991, data = eg, geom = 'point')
as.numeric(gsub(',', '',eg$X1990))
test <- apply(eg, 2, as.numeric(gsub(',', '')))
test <- apply(eg, 2, as.numeric(gsub(',', '',x)))
char2num <- function(x){
as.numeric(gsub(',','', x))
}
test <- apply(eg, 2, char2num)
View(test)
summarY9eg
summarY(eg)
summary(eg)
eg <- data.frame('EG_kwh' = eg$Electricity.generation.total..kilowatt.hours., test)
View(eg)
eg$Electricity.generation.total..kilowatt.hours. <- NULL
View(eg)
qplot(x = EG_kwh, y = X1990, data = eg, geom = 'bar')
qplot(x = EG_kwh, y = X1990, data = eg, geom = 'bar', stat = 'identity')
qplot(x = EG_kwh, y = X1991, data = eg, geom = 'bar', stat = 'identity')
install.packages('sas7bdat')
library(sas7bdat)
interest <- read.sass7bdat('interest.sas7bdat')
interest <- read.sas7bdat('interest.sas7bdat')
install.packages('foreign')
library(foreign)
interest <- read.spss('interest.sav')
View(interest)
fc <- read.csv('food-consumption.csv')
View(fc)
plot <- ggplot(aes(x=Country, y=Real.coffee), data = fc)
plot + geom_bar(stat = 'identity')
plot <- ggplot(aes(x=Country, y=Tea), data = fc)
plot + geom_bar(stat = 'identity')
plot <- ggplot(aes(x=Country, y=Real.coffee), data = fc)
plot + geom_bar(stat = 'identity')
is.na(fc)
is.na(fc) <- 0
fc[is.na(fc)]
fc[is.na(fc)] <- 0
View(fc)
View(t(fc))
View(fc)
View(fc[-1])
View(t(fc[-1]))
View(fc)
pcoffee <- ggplot(aes(x = Country, y = Real.coffee), data = fc)
pcoffee + geom_bar(stat = 'identity')
pcoffee + geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90))
pcoffee + geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
pcoffee + geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90, vjust = 1))
pcoffee + geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90, vjust = 2))
pcoffee + geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90, vjust = -1))
pcoffee + geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90, vjust = -.5))
pcoffee + geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90, vjust = 0))
pcoffee + geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90))
pcoffee + geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90, vjust = 0))
pcoffee + geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90, vjust = 0)) +
ylab('Real Coffee') +
ggtitle('Consumption by Country')
ptea <- ggplot(aes(x = Country, y = Tea), data = fc)
ptea <- ptea + geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90, vjust = 0)) +
ylab('Tea') +
ggtitle('Consumption of Coffee/nby Country')
ptea
ptea <- ggplot(aes(x = Country, y = Tea), data = fc)
ptea <- ptea + geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90, vjust = 0)) +
ylab('Tea') +
ggtitle('Consumption of Coffee\nby Country')
ptea
ptea <- ggplot(aes(x = Country, y = Tea), data = fc)
ptea <- ptea + geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90, vjust = 0)) +
ylab('Tea') +
ggtitle('Consumption of Tea\nby Country')
ptea
pcoffee <- ggplot(aes(x = Country, y = Real.coffee), data = fc)
pcoffee <- pcoffee + geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90, vjust = 0)) +
ylab('Real Coffee') +
ggtitle('Consumption of Coffee\nby Country')
pcoffee
ptea
pcoffee
grid.arrange(pcoffee, ptea, ncol = 2)
pcoffee <- ggplot(aes(x = Country, y = Real.coffee), data = fc)
pcoffee <- pcoffee + geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90, vjust = 0)) +
ylab('Real Coffee') +
ggtitle('Consumption of Coffee\nby Country') +
geom_bar(stat = 'identity', aes(x = Country, y = Tea))
pcoffee <- ggplot(aes(x = Country, y = Real.coffee), data = fc)
pcoffee <- pcoffee + geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90, vjust = 0)) +
ylab('Real Coffee') +
ggtitle('Consumption of Coffee\nby Country')
pcoffee + geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90, vjust = 0)) +
ylab('Real Coffee') +
ggtitle('Consumption of Coffee\nby Country') +
geom_bar(aes(x = Country, y = Tea))
pcoffee + geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90, vjust = 0)) +
ylab('Real Coffee') +
ggtitle('Consumption of Coffee\nby Country') +
geom_bar(aes(x = Country, y = Tea), stat = 'identity')
pcoffee + geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90, vjust = 0)) +
ylab('Real Coffee') +
ggtitle('Consumption of Coffee\nby Country') +
geom_bar(aes(x = Country, y = Tea), stat = 'identity', color = 'blue')
pcoffee + geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle = 90, vjust = 0)) +
ylab('Real Coffee') +
ggtitle('Consumption of Coffee\nby Country') +
geom_bar(aes(x = Country, y = Tea), stat = 'identity', fill = 'blue')
pcoffee + geom_bar(stat = 'identity', fill = 'red') +
theme(axis.text.x = element_text(angle = 90, vjust = 0)) +
ylab('Real Coffee') +
ggtitle('Consumption of Coffee\nby Country') +
geom_bar(aes(x = Country, y = Tea), stat = 'identity', fill = 'blue')
View(melt(fc))
?melt
library(reshape2)
View(melt(fc))
test <- melt(fc)
ggplot(aes(x = country, y = value, fill = variable), data = test) +
geom_bar(stat = 'identity', position = 'dodge')
ggplot(aes(x = Country, y = value, fill = variable), data = test) +
geom_bar(stat = 'identity', position = 'dodge')
ggplot(aes(x = country, y = value, fill = variable), data = test[(test$variable == 'Tea' | test$variable == 'Real.coffee'),]) +
geom_bar(stat = 'identity', position = 'dodge')
ggplot(aes(x = Country, y = value, fill = variable), data = test[(test$variable == 'Tea' | test$variable == 'Real.coffee'),]) +
geom_bar(stat = 'identity', position = 'dodge')
ggplot(aes(x = Country, y = value, fill = variable), data = test[(test$variable == 'Tea' | test$variable == 'Real.coffee'),]) +
geom_bar(stat = 'identity', position = 'dodge') +
scale_fill_discrete(name = 'Consumed Product',
breaks = c('Real.Coffee', 'Tea'),
labels = c('Real Coffee', 'Tea'))
ggplot(aes(x = Country, y = value, fill = variable), data = test[(test$variable == 'Tea' | test$variable == 'Real.coffee'),]) +
geom_bar(stat = 'identity', position = 'dodge') +
scale_fill_discrete(name = 'Consumed Product',
labels = c('Real Coffee', 'Tea'))
ggplot(aes(x = Country, y = value, fill = variable), data = test[(test$variable == 'Tea' | test$variable == 'Real.coffee'),]) +
geom_bar(stat = 'identity', position = 'dodge') +
scale_fill_discrete(name = 'Consumed Product',
breaks = c('Real.coffee', 'Tea'),
labels = c('Real Coffee', 'Tea'))
ggplot(aes(x = Country, y = value, fill = variable), data = test[(test$variable == 'Tea' | test$variable == 'Real.coffee'),]) +
geom_bar(stat = 'identity', position = 'dodge') +
scale_fill_discrete(name = 'Consumed\nProduct',
breaks = c('Real.coffee', 'Tea'),
labels = c('Real Coffee', 'Tea'))
ggplot(aes(x = Country, y = value, fill = variable), data = test[(test$variable == 'Tea' | test$variable == 'Real.coffee'),]) +
geom_bar(stat = 'identity', position = 'dodge') +
scale_fill_discrete(name = 'Consumed\nProduct',
breaks = c('Real.coffee', 'Tea'),
labels = c('Real Coffee', 'Tea')) +
xlab('Percentage of Population') +
ggtitle('Tea and Coffee Drinkers\nIn Europe')
ggplot(aes(x = Country, y = value, fill = variable), data = test[(test$variable == 'Tea' | test$variable == 'Real.coffee'),]) +
geom_bar(stat = 'identity', position = 'dodge') +
scale_fill_discrete(name = 'Consumed\nProduct',
breaks = c('Real.coffee', 'Tea'),
labels = c('Real Coffee', 'Tea')) +
ylab('Percentage of Population') +
ggtitle('Tea and Coffee Drinkers\nIn Europe')
ggplot(aes(x = Country, y = Real.coffee), data = fc) +
geom_line() +
geom_line(aes(x = Country, y = Sweetener))
ggplot(aes(x = Country, y = Real.coffee), data = fc) +
geom_line()
ggplot(aes(x = Country, y = Real.coffee), data = fc) +
geom_point()
ggplot(aes(x = Sweetener, y = Real.coffee), data = fc) +
geom_point()
ggplot(aes(x = ((Sweetener-mean(Sweetener))/(sd(Sweetener))),
y = ((Real.coffee-mean(Real.coffee))/(sd(Real.coffee)))), data = fc) +
geom_point()
ggplot(aes(x = Sweetener, y = Tea), data = fc) +
geom_point()
ggplot(aes(x = Jam, y = Crisp.bread), data = fc) +
geom_point()
ggplot(aes(x = Butter, y = Crisp.bread), data = fc) +
geom_point()
ggplot(aes(x = Apples, y = Oranges), data = fc) +
geom_point()
cor(fc[-1])
View(cor(fc[-1]))
?cor
fc_cor_table <- cor(fc[-1])
fc_cor_table$Real.coffee
class(fc_cor_table)
fc_cor_table <- data.frame(fc_cor_table)
View(fc_cor_table)
fc_cor_table$Tea
which(max(fc_cor_table$Tea))
which(fc_cor_table$Tea == max(fc_cor_table$Tea))
fc_cor_table$Tea[which(fc_cor_table$Tea == max(fc_cor_table$Tea))]
which(max(fc_cor_table$Tea))
which(fc_cor_table$Tea == max(fc_cor_table$Tea))
which(fc_cor_table$Tea == max(fc_cor_table$Tea[fc_cor_table$Tea != 1,]))
which(fc_cor_table$Tea == max(fc_cor_table$Tea[fc_cor_table$Tea != 1]))
row.names(fc_cor_table)[which(fc_cor_table$Tea == max(fc_cor_table$Tea[fc_cor_table$Tea != 1]))]
highcor <- function(x){
row.names(fc_cor_table)[which(fc_cor_table$x == max(fc_cor_table$x[fc_cor_table$x != 1]))]
}
apply(fc_cor_table, 2, highcor)
warnings()
highcor(fc_cor_table$Tea)
highcor <- function(x){
row.names(fc_cor_table)[which(x == max(x[x != 1]))]
}
highcor(fc_cor_table$Tea)
apply(fc_cor_table, 2, highcor)
View(apply(fc_cor_table, 2, highcor))
highcor <- function(x){
row.names(fc_cor_table)[which(x == max(x[x != 1]))]
max(x[x != 1])
}
View(apply(fc_cor_table, 2, highcor))
highcor <- function(x){
row.names(fc_cor_table)[which(x == max(x[x != 1]))], max(x[x != 1])
}
highcor <- function(x){
c(row.names(fc_cor_table)[which(x == max(x[x != 1]))], max(x[x != 1]))
}
View(apply(fc_cor_table, 2, highcor))
plot(fc_cor_table)
library(corrplot)
install.packages('corrplot')
library(corrplot)
corrplot(fc_cor_table, method = 'circle')
class(fc_cor_table)
corrplot(fc_cor_table)
View(fc)
cortab <- cor(fc[-1])
corrplot(cortab)
class(cortab)
View(cortab)
corrplot(as.matrix(fc_cor_table))
corrplot(as.matrix(fc_cor_table))
corrplot(as.matrix(cor(fc[-1])))
corrplot(as.matrix(cor(fc)))
corrplot(as.matrix(cor(fc[-1])))
corrplot(cor(fc[-1]))
ggplot(aes(x = Country, y = value, fill = variable),
data = fcmelt[(fcmelt$variable == 'Tea' | fcmelt$variable == 'Real.coffee'),]) +
geom_bar(stat = 'identity', position = 'dodge') +
scale_fill_discrete(name = 'Consumed\nProduct',
breaks = c('Real.coffee', 'Tea'),
labels = c('Real Coffee', 'Tea')) +
ylab('Percentage of Population') +
ggtitle('Tea and Coffee Drinkers\nIn Europe')
fcmelt <- melt(fc)
ggplot(aes(x = Country, y = value, fill = variable),
data = fcmelt[(fcmelt$variable == 'Tea' | fcmelt$variable == 'Real.coffee'),]) +
geom_bar(stat = 'identity', position = 'dodge') +
scale_fill_discrete(name = 'Consumed\nProduct',
breaks = c('Real.coffee', 'Tea'),
labels = c('Real Coffee', 'Tea')) +
ylab('Percentage of Population') +
ggtitle('Tea and Coffee Drinkers\nIn Europe')
